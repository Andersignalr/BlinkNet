@page "/register"

@using Microsoft.AspNetCore.SignalR.Client

@using BlinkNet.Data
@using Microsoft.EntityFrameworkCore

@inject IDbContextFactory<MensagemContext> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime js

@implements IAsyncDisposable

@*
<card>
	<p style="color: #123; font-size: 22px;"><b>		Register	</b></p>

	<input type="text" placeholder="Name..." @bind="Name" />
	<input type="text" placeholder="Login..." @bind="UserName" autocomplete="off" />
	<input type="password" placeholder="Password..." @bind="Password" autocomplete="off" />

	<button id="btnRegistrar" @onclick="RegistrarUsuario">Register</button>
</card> *@

@* <button id="btnEnviar" @onclick="EnviarMensagem" style="display: none;">Enviar</button> *@


<header>
	<h2 class="logo"><ion-icon name="logo-ionitron"></ion-icon></h2>
	<nav class="navigation">
		<a href="/">Chat</a>
		<a href="/login" class="btnLogin-popup">Login</a>
	</nav>
</header>

<div class="wrapper active">
	<span class="icon-close"><ion-icon name="close-outline"></ion-icon></span>

	<div class="form-box register">
		<h2>Registration</h2>
			
			<div class="input-box">
				<span class="icon"><ion-icon name="happy"></ion-icon></span>
				<input type="text" @bind="Name" required>
				<label>Name</label>
			</div>
			<div class="input-box">
				<span class="icon"><ion-icon name="person"></ion-icon></span>
				<input type="text" @bind="UserName" required>
				<label>UserName</label>
			</div>
			<div class="input-box">
				<span class="icon"><ion-icon name="lock-closed"></ion-icon></span>
				<input type="password" @bind="Password" required>
				<label>Password</label>
			</div>
			<div class="remember-forgot">
				<label><input type="checkbox" />I agree to the terms & conditions</label>
			</div>
			<button type="submit" class="btn" @onclick="RegistrarUsuario">Register</button>
			<div class="login-register">
				<p>
					Already have an account?
					<a href="/login" class="login-link">Login</a>
				</p>
			</div>
	</div>
</div>

<script src="/js/scriptLogin.js"></script>
<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>

@code {

	private string Name = "";

	private string UserName = "";

	private string Password = "";

	protected override async Task OnInitializedAsync()
	{

	}

	private async Task RegistrarUsuario()
	{
		if (Name != "")
		{
			using var context = DbFactory.CreateDbContext();

			if (context is not null && context.People is not null)
			{
				if (context.People is not null)
				{
					var novoUsuario = await context.People
					.Where(p => p.UserName == UserName)
					.FirstOrDefaultAsync();


					if (novoUsuario == null)
					{

						context.People.Add(new Person
							{
								Name = Name,
								UserName = UserName,
								Password = Password
							});

						try
						{
							await context.SaveChangesAsync();
						}
						catch (Exception ex)
						{
							Console.WriteLine(ex);
						}

						Navigation.NavigateTo($"/login/{UserName}");
						await js.InvokeVoidAsync("location.reload");
					}
					else
					{
						Console.WriteLine("Este usuário ja existe");
					}
				}
			}
		}

	}


	public async ValueTask DisposeAsync()
	{

	}
}
