@page "/login/{UserName?}"


@using Microsoft.EntityFrameworkCore

@using BlinkNet.Data

@inject IDbContextFactory<MensagemContext> DbFactory

@inject IPersonService PersonService

@inject NavigationManager Navigation
@inject IJSRuntime js

<card>
    <p style="color: #123; font-size: 22px;"><b>login</b></p>

    <input type="text" placeholder="Login..." @bind="UserName" />
    <input type="password" placeholder="Password..." @bind="Password" />

    <div style="width: 100%; display:flex; flex-direction: row; justify-content: space-between;">

        <button id="btnLogin" @onclick="BuscaUsuario">Login</button>
        <a @onclick="Register"><button>Register</button></a>
    </div>
</card>

@code {

    [Parameter]
    public string UserName { get; set; } = "";

    public string Password { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task BuscaUsuario()
    {
        if (UserName != "")
        {
            using var context = DbFactory.CreateDbContext();

            if (context is not null && context.People is not null)
            {
                if (context.People is not null)
                {
                    var usuarioExistente = await context.People
                    .Where(p => p.UserName == UserName && p.Password == Password)
                    .FirstOrDefaultAsync();


                    if (usuarioExistente != null)
                    {
                        Console.WriteLine("Existe este usuario");

                        PersonService.SetPerson(usuarioExistente);
                        await PersonService.SetPersonFromLocalStorageAsync();

                        Navigation.NavigateTo($"/");
                        await js.InvokeVoidAsync("location.reload");
                    }

                    else
                    {
                        Console.WriteLine("\n" + "Usuario não existe no banco de dados----------------");
                    }
                }
            }
        }

    }

    private async Task Register()
    {
        await PersonService.ClearPerson();
        // await js.InvokeVoidAsync("location.reload");
        await js.InvokeVoidAsync("window.location.assign", "/register");
    }

}
