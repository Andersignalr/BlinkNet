@page "/"

@using Microsoft.AspNetCore.SignalR.Client

@using BlinkNet.Data
@using Microsoft.EntityFrameworkCore


@inject IPersonService PersonService

@inject IDbContextFactory<MensagemContext> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime js
@implements IAsyncDisposable


@* @if (!string.IsNullOrEmpty(UserName))
{
    <card style="min-height:auto; padding: 5px; flex-direction: row; justify-content: space-between">
        <p><b style="color: black;">Hi, @UserName! </b></p><a @onclick="Logout"><button style="margin: 2px; padding: 4px 8px;">Logout</button></a>
    </card>
}
else
{
    <a href="\login"><button>Login</button></a>
}

<button id="btnEnviar" @onclick="EnviarMensagem" style="display: none;">Enviar</button>

<div class="container">
    <div class="chat-background">

        <card>

            @foreach (var mensagem in mensagens)
            {
                <mensagem>
                    @mensagem
                </mensagem>
            }

            <input type="text" id="txtMensagem" @bind="novaMensagem" @onkeypress="OnKeyPress" placeholder="Type a message..." />
        </card>

    </div>
</div> *@


@* ----HTML---- *@

<header>
	<h2 class="logo"><ion-icon name="logo-ionitron"></ion-icon></h2>
	<nav class="navigation">
		<a href="/">Chat</a>
		@if (!string.IsNullOrEmpty(UserName))
		{
			<a href="/" class="btnLogin-popup" @onclick="Logout">Logout</a>

		}
		else
		{
			<a href="/login" class="btnLogin-popup">Login</a>
		}
	</nav>
</header>


<container>
	@if (!string.IsNullOrEmpty(UserName))
	{
		<div class="profile-area">
			<div class="image"></div>
			<name>@UserName</name>
		</div>
	}

	@if (mensagens.Count() > 0)
	{
		<div class="container-chat">

			<div class="chat-area">
				@foreach (var mensagem in mensagens)
				{
					<mensagem>
						<text>
							@mensagem
						</text>
					</mensagem>
				}
			</div>
		</div>
	}


	<div class="input-area">
		<div class="input-message">
			<input type="text" id="txtMensagem" @bind="novaMensagem" @onkeypress="OnKeyPress" placeholder="Type your message here..." />
			<button id="btnEnviar" @onclick="EnviarMensagem"><ion-icon name="send"></ion-icon></button>
		</div>
	</div>
</container>

<script src="/js/script.js"></script>
<script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>

@* ------------ *@

@code {

	public string UserName = "";

	// lista dinâmica de mensagens do banco de dados, que está associada ao HTML da página, semelhante a um "State" no React
	private List<string> mensagens = new List<string>();

	// variável que está associada ao input HTML, a mágica do razor acontecendo aqui
	private string novaMensagem = "";

	// variável que armazenará a conexão SignalR para escutar e ativar eventos
	private HubConnection hubConnection;


	// Preparações a serem feitas ao iniciar o componente
	protected override async Task OnInitializedAsync()
	{
		// Instancia um contexto da "fábrica de banco de dados", que será necessário pra fazer a comunicação entre a página e o banco.
		using var context = DbFactory.CreateDbContext();


		// Carrega as mensagens pré-existentes no banco de dados.
		if (context.ChatMensagens is not null)
		{
			var chatMensagens = await context.ChatMensagens.AsQueryable().ToListAsync();
			foreach (var message in chatMensagens)
			{
				var encodedMsg = $"{message.Content}";
				mensagens.Add(encodedMsg);
				await InvokeAsync(StateHasChanged);
			}
		}



		if (hubConnection is null)
		{
			hubConnection = new HubConnectionBuilder()
				.WithUrl(Navigation.ToAbsoluteUri("/chathub"))
				.Build();

			// Ao Receber uma mensagem, evento disparado pela conexão com o HUB, mostra o conteúdo na tela adicionando um li na lista
			hubConnection.On<string>("ReceberMensagem", async (message) =>
			{
				var encodedMsg = $"{message}";
				mensagens.Add(encodedMsg);
				await InvokeAsync(StateHasChanged);
			});
		}


		await hubConnection.StartAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await PersonService.GetPersonFromLocalStorageAsync();
			UserName = PersonService.GetPerson()?.UserName ?? "";
			await InvokeAsync(StateHasChanged);

		}

	}


	// Função / Tarefa que cuida da parte de envio de mensagem, seja pro HUB, seja pro Banco de dados
	private async Task EnviarMensagem()
	{
		if (PersonService.GetPerson() is not null)
		{

			if (novaMensagem is not null && novaMensagem != "")
			{
				#region salva mensagem no banco de dados

				using var context = DbFactory.CreateDbContext();

				if (context is not null && context.ChatMensagens is not null)
				{

					context.ChatMensagens.Add(new ChatMensagem
						{
							Content = novaMensagem,
						});

					try
					{
						await context.SaveChangesAsync();
					}
					catch (Exception ex)
					{
						Console.WriteLine(ex);
					}
				}

				#endregion

				try
				{
					await hubConnection.SendAsync("EnviarMensagem", novaMensagem);
				}
				catch (Exception ex)
				{
					Console.WriteLine($"\n{ex.Message}\n");
				}
				novaMensagem = "";
			}
			await Focus("txtMensagem");
		}
		else
		{
			await js.InvokeVoidAsync("alert", "você não está logado");
		}

	}

	// Foca no input de digitar a mensagem, é usado após enviar a mensagem com sucesso, prepara pra receber uma nova mensagem
	private async Task Focus(string elementId)
	{
		await js.InvokeVoidAsync("focusById", elementId);
	}

	// Ao pressionar a tecla enter no componente, provavelmente o input da mensagem, irá enviar a mensagem clicando no botão por javascript
	private async Task OnKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
		{
			await js.InvokeVoidAsync("pressButton", "btnEnviar");
		}
	}

	private async Task Logout()
	{
		await PersonService.ClearPerson();
		// await js.InvokeVoidAsync("location.reload");
		// await js.InvokeVoidAsync("window.location.assign", "/login");

		PersonService.SetPerson(null);
		UserName = "";
		await InvokeAsync(StateHasChanged);

	}

	//evita duplicação de eventos de conexão do HUB
	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}

@* arquivo javascript  com as funções usadas aqui e chamadas usando Interoperabilidade com javascript *@
<script src="/js/Utilidade.js"></script>

@*
	if(novaMensagem.Contains("/deleteAll"))
		{
			Console.WriteLine("identificou o delete");
			using var context = DbFactory.CreateDbContext();
			var todasMensagens = context.ChatMensagens.ToList();
			Console.WriteLine($"Número de mensagens a serem excluídas: {todasMensagens.Count}");
			context.ChatMensagens.RemoveRange(todasMensagens);

			try
			{
				await context.SaveChangesAsync();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
			}
		}
*@